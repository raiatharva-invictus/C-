// Topic : - the 'this' pointer

/*
1 each class member function contains a hidden pointer called this. that pointers contains the address of the current object for which the object is being executed . This also applies to constructors and destructors.

*/

#include <iostream>
#include "cylinder.h"
using namespace std;

class Dog{
    public:
        Dog(string_view _name, string_view _breed, int _age);
        ~Dog();

        void print_info(){
            cout << name << breed << *age << endl;
        }
        // void set_name(string_view name){
        //     this->name = name;
        // }
        // void set_age(int age){
        //     *(this->age) = age;
        // }
        
        // chained call using pointers
        // Dog* set_name(string_view name){
        //     this->name = name;
        //     return this;
        // }
        // Dog* set_age(int age){
        //     *(this->age) = age;
        //     return this;
        // }


        // chained call using references
        Dog& set_name(string_view name){
            this->name = name;
            return *this;
        }
        Dog& set_age(int age){
            *(this->age) = age;
            return *this;
        }
        
    private:
        string name;
        string breed;
        int *age{nullptr};

};
Dog::Dog(string_view _name, string_view _breed, int _age){
    name = _name;
    breed = _breed;
    age = new int; //dynamic allocation
    *age = _age;
    cout << "Constructor is called for " << name << " at " << this << endl;
}
Dog::~Dog(){
    delete age;
    cout << "Destructor is called for " << name << " at " << this << endl;
}

int main()
{
    // Dog dog ("dauber", "doberman", 5);
    // cout << "Done ! " << endl;

    // Dog dog ("dauber", "doberman", 5);
    // dog.print_info();
    // dog.set_name("daber");
    // dog.set_age(2);
    // dog.print_info();
    
    
    Dog dog ("dauber", "doberman", 5);
    //chained call using pointers
    // dog.print_info();
    // dog.set_age(3)->set_name("dabber");
    // dog.print_info();

    //chained call using references
    dog.print_info();
    dog.set_age(3).set_name("dabber");
    dog.print_info();
    // cout << "Done ! " << endl;



}       







